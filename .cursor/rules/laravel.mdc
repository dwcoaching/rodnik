---
alwaysApply: true
---

В проекте используется `Laravel Sail`. Поэтому если тебе нужно запустить `php artisan` или `composer`, то нужно это делать с использованием `sail`. Например, `sail art` или `sail composer`. Никогда не пытайся установить `php` / `composer` / `npm`, всегда пользуйся `sail`.

После того как ты закончил работу, запускай `sail pint --dirty` чтобы корректно отформатировать разработанный код.

При этом тебе никогда не надо запускать команды `cache:clear`, `optimize:clear`, `config:clear` или `view:clear`

Если в миграции тебе нужно создать relation, то используй метод `foreignIdFor`.

Опционально смотри последние логи в файле `storage/logs/laravel.log`

Никогда и ни при каких обстоятельствах не запускай `sail artisan migrate:fresh` или другие команды, которые могут удалить все данные из БД. 
А когда нужно запустить миграции, используй `sail artisan migrate --step` чтобы миграции применялись последовательно.

Если в автоматически сгенерированном коде (например, при запуске какой-то команды которая создает файл) есть комментарии к функциям или переменным, то удали эти комментарии, чтобы они не мешали при чтении кода. Пример такого комментария:
/**
* The filter's component.
*
* @var string
*/
